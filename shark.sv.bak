

module  shark (  	input Clk,                // 50 MHz clock
                        Reset,              // Active-high reset signal
                        frame_clk,          // The clock indicating a new frame (~60Hz)
								
						input [9:0]   DrawX, DrawY,       // Current pixel coordinates
						input [7:0]	  keycode,				 // keyboard press
						
						input shark_exist,
						output is_shark,          // check if shark 
						output [3:0] shark_address
              );
    
    parameter [9:0] shark_X_Center = 10'd320;  // Center position on the X axis
    parameter [9:0] shark_Y_Center = 10'd240;  // Center position on the Y axis
    parameter [9:0] shark_X_Min = 10'd0;       // Leftmost point on the X axis
    parameter [9:0] shark_X_Max = 10'd639;     // Rightmost point on the X axis
    parameter [9:0] shark_Y_Min = 10'd0;       // Topmost point on the Y axis
    parameter [9:0] shark_Y_Max = 10'd479;     // Bottommost point on the Y axis
	 
    parameter [9:0] shark_X_Step = 10'd1;      // Step size on the X axis
    parameter [9:0] shark_Y_Step = 10'd1;      // Step size on the Y axis
    //parameter [9:0] shark_Size = 10'd4;      // shark size
	parameter [9:0] shark_sizeX=10'd256;
	parameter [9:0] shark_sizeY=10'd192;
    
	logic [9:0] shark_X_Pos,shark_Y_Pos;
    logic [9:0] shark_X_Motion, shark_Y_Motion;
    logic [9:0] shark_X_Pos_in, shark_X_Motion_in, shark_Y_Pos_in, shark_Y_Motion_in;
    
    //////// Do not modify the always_ff blocks. ////////
    // Detect rising edge of frame_clk
    logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
        frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    end
    // Update registers
    always_ff @ (posedge Clk)
    begin
        if (Reset)
        begin
            shark_X_Pos <= shark_X_Center;
            shark_Y_Pos <= shark_Y_Center;
            shark_X_Motion <= 10'd0;
            shark_Y_Motion <= shark_Y_Step;
        end
        else
        begin
            shark_X_Pos <= shark_X_Pos_in;
            shark_Y_Pos <= shark_Y_Pos_in;
            shark_X_Motion <= shark_X_Motion_in;
            shark_Y_Motion <= shark_Y_Motion_in;
        end
    end
    //////// Do not modify the always_ff blocks. ////////
    //find the position of the user
//    logic directionX,directionY;
//    assign directionX= (sharkX > shark_X_Pos) ? 1'b0 : 1'b1; 
//    assign directionY= (sharkY > shark_Y_Pos) ? 1'b0 : 1'b1; 

    // You need to modify always_comb block.
    always_comb
    begin
        // By default, keep motion and position unchanged
        shark_X_Pos_in = shark_X_Pos;
        shark_Y_Pos_in = shark_Y_Pos;
        shark_X_Motion_in = shark_X_Motion;
        shark_Y_Motion_in = shark_Y_Motion;
        // Update position and motion only at rising edge of frame clock
        if (frame_clk_rising_edge)
        begin

			//escape from the user
//			if (directionX==1'b0)
//			begin
//				case(directionX)
//					// left
//					1'b0 : begin
//								shark_X_Motion_in = (~(shark_X_Step) + 1'b1);
//								//shark_Y_Motion_in = 10'h000;
//							end
//							
//					// right
//					1'b1 : begin
//								shark_X_Motion_in = shark_X_Step;
//								//shark_Y_Motion_in = 10'h000;
//							end
//                        default:
//								begin
//								end
//				endcase
////			end
////			else
////			begin
//				case(directionY)	
//					// up
//					1'b0: begin
//								//shark_X_Motion_in = 10'h000;
//								shark_Y_Motion_in = (~(shark_Y_Step) + 1'b1);
//							end
//					
//					// down
//					1'b1: begin
//								//shark_X_Motion_in = 10'h000;
//								shark_Y_Motion_in = shark_Y_Step;
//							end
//							
//					// default does nothing
//						default:
//							begin
//							end
//				endcase
			//end
            // Be careful when using comparators with "logic" datatype because compiler treats 
            //   both sides of the operator as UNSIGNED numbers.
            // e.g. shark_Y_Pos - shark_Size <= shark_Y_Min 
            // If shark_Y_Pos is 0, then shark_Y_Pos - shark_Size will not be -4, but rather a large positive number.
            if( shark_Y_Pos + shark_sizeY >= shark_Y_Max )  // shark is at the bottom edge, BOUNCE!
                shark_Y_Motion_in = (~(shark_Y_Step) + 1'b1);  // 2's complement.  
            else if ( shark_Y_Pos <= shark_Y_Min + shark_sizeY )  // shark is at the top edge, BOUNCE!
                shark_Y_Motion_in = shark_Y_Step;
					 
            // TODO: Add other boundary detections and handle keypress here.
        
            if( shark_X_Pos + shark_sizeX >= shark_X_Max )  // shark is at the right edge, BOUNCE!
                shark_X_Motion_in = (~(shark_X_Step) + 1'b1);  // 2's complement.  
            else if ( shark_X_Pos <= shark_X_Min + shark_sizeX )  // shark is at the left edge, BOUNCE!
                shark_X_Motion_in = shark_X_Step;
					 
            // Update the shark's position with its motion
            shark_X_Pos_in = shark_X_Pos + shark_X_Motion_in;
            shark_Y_Pos_in = shark_Y_Pos + shark_Y_Motion_in;
        end
        
    end
    
		logic [18:0] read_shark_address;
		logic	[9:0] 	left, up;
		logic	[9:0] 	tempX, tempY;
		//logic				shark_on;
		always_comb
		begin
			left	= shark_X_Pos - shark_sizeX/2;
			up		= shark_Y_Pos - shark_sizeY/2;
			tempX	=	DrawX - left;
			tempY	=	DrawY - up;
			if (tempX >= 0 && tempX < shark_sizeX && tempY >= 0 && tempY < shark_sizeY && shark_exist == 1'b1) 
				is_shark = 1'b1;
			else 
				is_shark = 1'b0;
			if(is_shark == 1'b1)
				read_shark_address	=	tempY * shark_sizeX + tempX + 1;
			else
				read_shark_address	=	19'd0;//FFFFFF, white
		end
		
		shark_RAM shark_RAM_inst(.*,.read_address(read_shark_address));
 
endmodule
